// File: C:\Users\galym\Desktop\ShopSmart\backend\src\server.ts
import * as dotenv from 'dotenv';
import path from 'path';

dotenv.config({ path: path.resolve(__dirname, '../.env') });

import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import http from 'http';
import { Server as SocketIOServer, Socket } from 'socket.io';
import mongoose from 'mongoose';
import jwt from 'jsonwebtoken';
import type { ExtendedError } from 'socket.io/dist/namespace';

import aiRoutes from './routes/aiRoutes';
import authRoutes from './routes/authRoutes';
import listRoutes from './routes/listRoutes';
import { IUser } from './models/User';
import { protect } from './middleware/authMiddleware';

// 1) –ó–∞–≥—Ä—É–∑–∫–∞ .env
// dotenv.config({ path: path.resolve(__dirname, '../.env') });
// –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ –≥–¥–µ –∑–∞–ø—É—â–µ–Ω node)
// –ï—Å–ª–∏ backend/ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω—è ShopSmart/, —Ç–æ –æ–Ω –Ω–∞–π–¥–µ—Ç ../.env
// –ï—Å–ª–∏ backend/ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ —Å–∞–º–æ–π –ø–∞–ø–∫–∏ backend/, —Ç–æ –æ–Ω –Ω–∞–π–¥–µ—Ç .env –≤ –Ω–µ–π –∂–µ.
dotenv.config(); // <--- –ü—Ä–æ–±—É–µ–º —Ç–∞–∫

// 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const requiredEnvVars = ['MONGODB_URI', 'JWT_SECRET', 'CLIENT_URL'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
    console.error(`‚ùå FATAL ERROR: Missing required environment variables: ${missingVars.join(', ')}`);
    process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á Google AI (–Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–æ)
if (!process.env.GOOGLE_API_KEY) {
  console.warn('‚ö†Ô∏è WARNING: GOOGLE_API_KEY is not set. AI features will be disabled.');
}

// –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîë MONGODB_URI set?', !!process.env.MONGODB_URI);
console.log('üîë JWT_SECRET   set?', !!process.env.JWT_SECRET);
console.log('üîë GOOGLE_API_KEY set?', !!process.env.GOOGLE_API_KEY);
console.log('CLIENT_URL:', process.env.CLIENT_URL);

// 3) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
mongoose
  .connect(process.env.MONGODB_URI!)
  .then(() => console.log('‚úÖ MongoDB Connected'))
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
    process.exit(1);
  });

// 4) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express + HTTP + Socket.IO
const app = express();
const server = http.createServer(app);
const io = new SocketIOServer(server, {
  cors: {
    origin: process.env.CLIENT_URL, // –£–±—Ä–∞–ª–∏ || '*' - –µ—Å–ª–∏ CLIENT_URL –Ω–µ –∑–∞–¥–∞–Ω, –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –≤—ã—à–µ
    methods: ['GET','POST','PATCH','DELETE'],
  }
});

// –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Socket, –¥–æ–±–∞–≤–ª—è—è user
interface SocketWithUser extends Socket {
    user?: IUser | { id: string; email: string; username?: string }; // –î–æ–±–∞–≤–ª—è–µ–º user –∫ —Å–æ–∫–µ—Ç—É
}

// 5) –ú–∏–¥–ª–≤–∞—Ä—ã Express
app.use(cors({ origin: process.env.CLIENT_URL })); // –£–±—Ä–∞–ª–∏ || '*'
app.use(express.json());
app.use((req: Request, _res: Response, next: NextFunction) => {
  (req as Request & { io?: SocketIOServer }).io = io;
  next();
});

// 6) WebSocket Middleware –∏ –õ–æ–≥–∏–∫–∞
// –ø—Ä–æ–≤–µ—Ä—è–µ–º authToken –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞
io.use((socket, next: (err?: ExtendedError) => void) => {
  const token = socket.handshake.auth?.token;
  if (!token) return next(new Error('unauthorized'));

  try {
    const payload = jwt.verify(token, process.env.JWT_SECRET as string);
    socket.data.user = payload;          // –∫–ª–∞–¥—ë–º user‚Äë–∏–Ω—Ñ—É –Ω–∞ —Å–æ–∫–µ—Ç
    next();
  } catch (err: any) {
    if (err.name === 'TokenExpiredError') {
      return next(new Error('jwt_expired'));   // ‚Ü© —Å–æ–æ–±—â–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
    }
    next(new Error('unauthorized'));
  }
});

io.on('connection', (socket: SocketWithUser) => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø
  console.log(`üîå WS connected: ${socket.id}, User: ${socket.user?.email}`);

  // --- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–•–û–î –í –ö–û–ú–ù–ê–¢–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
  if (socket.user?.id) {
      const userRoom = `user_${socket.user.id}`;
      console.log(`[WS] Socket ${socket.id} automatically joining room: ${userRoom}`);
      socket.join(userRoom);
  } else {
      console.warn(`[WS] Cannot join user room for socket ${socket.id}: User ID missing.`);
  }

  
  socket.on('joinList', async (listId: string) => { // –°–¥–µ–ª–∞–µ–º async –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    if (!socket.user?.id) return console.error(`WS Error [${socket.id}]: No user found on socket for joinList.`);
    if (listId && typeof listId === 'string') {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π
            const list = await mongoose.model('List').findOne({
                _id: listId,
                $or: [
                    { owner: socket.user.id },
                    { sharedWith: socket.user.id }
                ]
            }).select('_id').lean(); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

            if (list) {
                console.log(`User ${socket.user?.email} joining room: list_${listId}`);
                socket.join(`list_${listId}`);
            } else {
                console.warn(`WS Auth Denied [${socket.id}]: User ${socket.user?.email} tried to join unauthorized list ${listId}`);
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–ª–∏–µ–Ω—Ç—É
                // socket.emit('error', { message: 'Unauthorized to join this list' });
            }
        } catch (error) {
            console.error(`WS Error [${socket.id}]: DB error checking permissions for list ${listId}`, error);
        }

    } else {
        console.warn(`WS Warn [${socket.id}]: Invalid listId received for joinList:`, listId);
    }
  });

  socket.on('leaveList', (listId: string) => {
    if (listId && typeof listId === 'string') {
        console.log(`User ${socket.user?.email} leaving room: list_${listId}`);
        socket.leave(`list_${listId}`);
    }
  });

  // --- –£–ë–†–ê–õ–ò –û–ë–†–ê–ë–û–¢–ö–£ 'action' ---

  socket.on('disconnect', reason => {
    console.log(`‚ùå WS disconnected: ${socket.id} (${socket.user?.email}), Reason: ${reason}`);
  });

  socket.on('error', (err) => {
      console.error(`WS Socket Error [${socket.id}], User: ${socket.user?.email}:`, err);
  });
});

// 7) API-—Ä–æ—É—Ç—ã
app.get('/api', (_req, res) => res.send('ShopSmart API is running'));
app.use('/api/auth', authRoutes);
app.use('/api/lists', listRoutes); // –ó–∞—â–∏—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–æ—É—Ç–µ—Ä–∞ listRoutes
// –ó–∞—â–∏—â–∞–µ–º AI —Ä–æ—É—Ç —Å –ø–æ–º–æ—â—å—é middleware 'protect'
app.use('/api/ai', protect, aiRoutes);

// 8) –†–∞–∑–¥–∞—á–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
// const clientDistPath = path.resolve(__dirname, '../../frontend/dist'); // –ü—É—Ç—å –∫ –±–∏–ª–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
// if (fs.existsSync(clientDistPath)) {
//     console.log(`Serving static files from: ${clientDistPath}`);
//     app.use(express.static(clientDistPath));
//     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º index.html –¥–ª—è –≤—Å–µ—Ö –Ω–µ-API GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è SPA —Ä–æ—É—Ç–∏–Ω–≥–∞)
//     app.get(/^(?!\/api).*/, (req, res) => {
//         res.sendFile(path.join(clientDistPath, 'index.html'));
//     });
// } else {
//     console.warn(`Frontend build directory not found at: ${clientDistPath}. Static file serving disabled.`);
// }


// 9) –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
  console.error('üí• ERROR:', err);
  const statusCode = err.statusCode || 500;
  let message = err.message || 'Internal Server Error';
  if (err.details?.startsWith('[GoogleGenerativeAI Error]')) {
      message = `AI Service Error: ${err.message}`;
  }
  res.status(statusCode).json({ message });
});

// 10) –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 5001;
server.listen(PORT, () => {
  console.log(`üöÄ Server listening on http://localhost:${PORT}`);
});